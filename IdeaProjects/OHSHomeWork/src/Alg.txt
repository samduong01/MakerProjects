1. 2, log3n, log2n, n^(2/3), 20n, 4n^2, 3^n, n!
2a. we could solve âˆš(3*2^(6+n)) inputs where n is the amount of inputs of the original machine
2b. 8*n
2c. 64*n
3. (n) = 100n, (n^2) = 10*n, (n^3) ~ 4.64158*n, (2^n) ~ (3.21887 + 0.69314*(n+2))/0.69314
4a. 1 is in O(1), f(n) = 1: f(n)/g(n) <= c, 1/1 <= c for all n >=1 thus we can say our constant is 1 -> f(n) <= c * g(n) -> 1<=1*1 -> 1<=1 -> thus 1
    is in O(1)
4b. 1 is in O(n), f(n) = 1: f(n)/g(n) <= c, 1/n <= c for all n >=1, n/n > 1/n for all n > 1 -> 1/1 > 1/n thus we can say c is 1 -> f(n) <= c* g(n) ->
    1 <= 1 * n for all n>=1 -> 1<= 1*1 -> thus we can say 1 is in O(n)
5a. theta, g(n)*k1<=f(n)<=g(n)*k2
5b. big omega, all values of f(n) are greater than g(n) at n>=k
5c. theta, g(n)*k1<=f(n)<=g(n)*k2
5d. big omega, all values of f(n) are greater than g(n) at n>=k
5e. big omega, all values of f(n) are greater than g(n) at n>=k
5f. big O, all values of f(n) are less than g(n) at n>=k
5g. theta, g(n)*k1<=f(n)<=g(n)*k2
5h. theta, g(n)*k1<=f(n)<=g(n)*k2
5i. big omega, all values of f(n) are greater than g(n) at n>=k
5j. theta, g(n)*k1<=f(n)<=g(n)*k2
5k. big O, all values of f(n) are less than g(n) at n>=k
6a. theta(1)
6b. theta(n)
6c. theta(n^2)
6d. theta(n^2)
6e. theta(n^2)
6f. theta(n^2)
6g. theta(n^3)
6h. theta(n^2)
6i. theta(n)
